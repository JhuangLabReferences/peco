% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_cyclic_one.R
\name{fit_trendfilter_generic}
\alias{fit_trendfilter_generic}
\title{Using trendfiltering to estimate cyclic trend of gene
expression}
\usage{
fit_trendfilter_generic(yy, polyorder = 2)
}
\arguments{
\item{yy}{A vector of gene expression values for one gene
that are ordered by cell cycle phase. Also, the
expression values are normalized and
transformed to standard normal distribution.}

\item{polyorder}{We estimate cyclic trends of gene expression
levels using nonparamtric trend filtering. The default fits second
degree polynomials.}
}
\value{
A list with two elements:
    \item{trend.yy}{The estimated cyclic trend.}
    \item{pve}{Proportion of variance explained by the cyclic
    trend in the gene expression levels.}
}
\description{
We applied quadratic (second order) trend filtering
using the trendfilter function in the genlasso package (Tibshirani,
2014).  The trendfilter function implements a nonparametric
smoothing method which chooses the smoothing parameter by
cross-validation and fits a piecewise polynomial regression. In
more specifics: The trendfilter method determines the folds in
cross-validation in a nonrandom manner.  Every k-th data point in
the ordered sample is placed in the k-th fold, so the folds contain
ordered subsamples. We applied five-fold cross-validation and chose
the smoothing penalty using the option lambda.1se: among all
possible values of the penalty term, the largest value such that
the cross-validation standard error is within one standard error of
the minimum. Furthermore, we desired that the estimated expression
trend be cyclical. To encourage this, we concatenated the ordered
gene expression data three times, with one added after another. The
quadratic trend filtering was applied to the concatenated data
series of each gene.
}
\examples{
library(SingleCellExperiment)
data(sce_top101genes)
coldata <- colData(sce_top101genes)

# cell cycle phase based on FUCCI scores
theta <- coldata$theta
names(theta) <- rownames(coldata)

# normalize expression counts to counts per million
counts_normed <- t((10^6)*t(assay(sce_top101genes)[1:5,])/colData(sce_top101genes)$molecules)
counts_quant <- data_transform_quantile(counts_normed, ncores=2)

# order FUCCI phase and expression
theta_ordered <- theta[order(theta)]
yy_ordered <- counts_quant[1,match(names(theta_ordered), colnames(counts_quant))]

fit <- fit_trendfilter_generic(yy_ordered)

plot(x=theta_ordered, y=yy_ordered, pch=16, cex=.7, axes=FALSE,
  ylab="quantile-normalized expression values", xlab="FUCCI phase",
  main = "trendfilter fit")
points(x=theta_ordered, y=fit$trend.yy, col="blue", pch=16, cex=.7)
axis(2)
axis(1,at=c(0,pi/2, pi, 3*pi/2, 2*pi),
  labels=c(0,expression(pi/2), expression(pi), expression(3*pi/2),
  expression(2*pi)))
abline(h=0, lty=1, col="black", lwd=.7)

}
\author{
Joyce Hsiao
}
