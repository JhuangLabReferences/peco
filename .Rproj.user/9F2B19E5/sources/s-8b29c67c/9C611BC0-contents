#' Compute proportation of variable explained for one gene
#'
#' Use trendfilter to estimate cyclic trend of expresison levels
#'
#' @param yy A vector of gene expression values ordered by known angles
#'
#' @return
#'     \describe{
#'     \item{\code{pve}}{Proportion of variance explained}
#'     }
#' @export

get.pve <- function(yy, method="trendfilter", polyorder=2) {
  if (method=="trendfilter") {
    fit <- fit.trendfilter.generic(yy, polyorder=polyorder)
    trend.yy <- fit$trend.yy
    ss_total <- (length(yy)-1)*var(yy)
    ss_error <- (length(yy)-1)*var(yy-trend.yy)

    pve <- 1-ss_error/ss_total
    #pval <- var.test(yy, yy-trend.yy, alternative="two.sided")$p.value
  }
  return(list(pve=pve))
}


#' @title compute variance explained for discrete cell time
#'
#' @param yy continous measurement
#' @param xx categorical variable
#'
#' @export
get.aov <- function(yy, xx) {
  nclass <- length(unique(xx))
  xx <- as.numeric(xx)

  ss_total <- sum((yy-mean(yy))^2)
  ss_within <- sum(sapply(1:nclass, function(i) {
    rr <- yy[xx==i];
    sum((rr-mean(rr))^2) }))

  pve <- 1-(ss_within/ss_total)
  ss_between <- ss_total-ss_within

  df_total <- length(xx)-1
  df_between <- nclass-1
  f.obs <- (ss_between/df_between)/(ss_total/df_total)
  pval <- pf(f.obs, df1=df_between, df2=df_total, lower.tail=F)

  return(list(pve=pve, pval=pval))
}


